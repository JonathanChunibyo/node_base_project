const createError = require('http-errors');
const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const logger = require('morgan');
const Database = require('./models');
const fs = require('fs');

require('dotenv').config();

class Server {
  constructor() {
    this.app = express();
    // connection to the database
    Database.authenticate();
    // server middleware for incoming requests
    this.middlewareServer();
    // response that is generated by the server to a request.
    this.responseRouteServer();
    // connection where the views for errors or get requests will go
    this.views();
  }

  middlewareServer() {
    // logs the HTTP request logger middleware with format 'dev'.
    this.app.use(logger('dev'));
    // parse the body of the incoming requests in JSON format
    this.app.use(express.json());
    // parses data submitted by HTML forms
    this.app.use(express.urlencoded({ extended: false }));
    // parse cookies attached to HTTP requests
    this.app.use(cookieParser());
    // serves static files from the 'public' directory
    this.app.use(express.static(path.join(__dirname, 'public')));
  }

  responseRouteServer() {
    // response path found on server
    this.responseRequestFound();
    // routes app
    this.routes();
    // response path not found on server
    this.responseRequestNotFound();
  }

  routes() {
    // creation of all project routes
    fs.readdirSync(`${__dirname}/routes`)
      .map((fileName) => {
        const route = `/api/${fileName.replace(/\.route.js$/, '')}`;
        this.app.use( route, require(`${__dirname}/routes/${fileName}`));
    });
  }

  responseRequestFound() {
    // response when the request enters a route on our server
    this.app.use(function (req, res, next) {
      // define a new response success res.formattedSend
      res.sendSuccess = function (data) {
        res.json({ status: true, data, error: null });
      };
      // define a new response error res.formattedSend
      res.sendError = function (error) {
        res.json({ status: false, data: null, error });
      };
      next();
    });
  }

  responseRequestNotFound(){
    // response when there is no path to which the request is being sent
    this.app.use(function (req, res, next) {
      next(createError(404));
    });
    this.app.use(function (err, req, res, next) {
      res.locals.message = err.message;
      res.locals.error = req.app.get('env') === 'development' ? err : {};

      res.status(err.status || 500);
      res.render('error');
    });
  }

  views() {
    // public hearings of the project
    this.app.set('views', path.join(__dirname, 'views'));
    this.app.set('view engine', 'jade');
  }

  static getInstance() {
    // the server instance is called and if it does not exist, a new instance is created.
    if (!Server.instance) {
      Server.instance = new Server();
    }
    return Server.instance;
  }
}

const { app } = Server.getInstance();
module.exports = app; 
